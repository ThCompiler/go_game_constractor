// Code generated by scg 1, .
//
// EchoGame-SceneStructs
//
// Command:
// scg
//.

package script

import (
	base_matchers "github.com/ThCompiler/go_game_constractor/director/matchers"
	"github.com/ThCompiler/go_game_constractor/director/scene"
	"github.com/ThCompiler/go_game_constractor/scg/scg/echogame/manager"
	"github.com/ThCompiler/go_game_constractor/scg/scg/echogame/script/errors"
	"github.com/ThCompiler/go_game_constractor/scg/scg/echogame/script/matchers"
)

type Goodbye struct {
	TextManager manager.TextManager
}

func (sc *Goodbye) React(_ *scene.Context) scene.Command {
	// TODO
	return scene.NoCommand
}

func (sc *Goodbye) Next() scene.Scene {
	//TODO
	return &Goodbye{TextManager: sc.TextManager}
}

func (sc *Goodbye) GetSceneInfo(ctx *scene.Context) (scene.Info, bool) {

	//TODO

	text, _ := sc.TextManager.GetGoodbyeText()
	return scene.Info{
		Text:             text,
		ExpectedMessages: []scene.MessageMatcher{},
		Buttons:          []scene.Button{},
	}, true
}

type Hello struct {
	TextManager manager.TextManager
}

func (sc *Hello) React(_ *scene.Context) scene.Command {
	// TODO
	return scene.NoCommand
}

func (sc *Hello) Next() scene.Scene {
	//TODO
	return &Hello{TextManager: sc.TextManager}
}

func (sc *Hello) GetSceneInfo(ctx *scene.Context) (scene.Info, bool) {
	var (
		number int64
	)

	//TODO

	text, _ := sc.TextManager.GetHelloText(
		number,
	)
	return scene.Info{
		Text:             text,
		ExpectedMessages: []scene.MessageMatcher{},
		Buttons:          []scene.Button{},
		Err:              scene.BaseSceneError{Scene: &Goodbye{TextManager: sc.TextManager}},
	}, true
}

type Echo struct {
	TextManager manager.TextManager
}

func (sc *Echo) React(_ *scene.Context) scene.Command {
	// TODO
	return scene.NoCommand
}

func (sc *Echo) Next() scene.Scene {
	//TODO
	return &Echo{TextManager: sc.TextManager}
}

func (sc *Echo) GetSceneInfo(ctx *scene.Context) (scene.Info, bool) {

	//TODO

	text, _ := sc.TextManager.GetEchoText()
	return scene.Info{
		Text: text,
		ExpectedMessages: []scene.MessageMatcher{
			base_matchers.AnyMatcher,
		},
		Buttons: []scene.Button{},
		Err:     base_matchers.NumberError,
	}, true
}

type EchoRepeat struct {
	TextManager manager.TextManager
}

func (sc *EchoRepeat) React(_ *scene.Context) scene.Command {
	// TODO
	return scene.NoCommand
}

func (sc *EchoRepeat) Next() scene.Scene {
	//TODO
	return &EchoRepeat{TextManager: sc.TextManager}
}

func (sc *EchoRepeat) GetSceneInfo(ctx *scene.Context) (scene.Info, bool) {
	var (
		userText string
	)

	//TODO

	text, _ := sc.TextManager.GetEchoRepeatText(
		userText,
	)
	return scene.Info{
		Text: text,
		ExpectedMessages: []scene.MessageMatcher{
			base_matchers.AnyMatcher,
			matchers.CheckedMatcher,
			matchers.AgreedMatcher,
		},
		Buttons: []scene.Button{},
		Err:     errors.DoreError,
	}, true
}
