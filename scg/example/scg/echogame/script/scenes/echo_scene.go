// Code generated by scg 1, .
//
// EchoGame-SceneStructs
//
// Command:
// scg
//.

package scenes

import (
	base_matchers "github.com/ThCompiler/go_game_constractor/director/matchers"
	"github.com/ThCompiler/go_game_constractor/director/scene"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/echogame/manager"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/echogame/script/payloads"
)

const (
	// DoreEchoButtonText - text for button Dore
	DoreEchoButtonText = "Привет"
	// JoreEchoButtonText - text for button Jore
	JoreEchoButtonText = "Привет"
)

// Echo scene
type Echo struct {
	TextManager manager.TextManager
	NextScene   SceneName
}

// React function of actions after scene has been played
func (sc *Echo) React(ctx *scene.Context) scene.Command {
	// TODO Write the actions after Echo scene has been played
	switch {
	// Buttons select
	case ctx.Request.NameMatched == DoreEchoButtonText && ctx.Request.WasButton:

	case ctx.Request.NameMatched == JoreEchoButtonText && ctx.Request.WasButton:

		// Matcher select
	case ctx.Request.NameMatched == base_matchers.AnyMatchedString:

	}

	sc.NextScene = EchoScene // TODO: manually set next scene after reaction
	return scene.NoCommand
}

// Next function returning next scene
func (sc *Echo) Next() scene.Scene {
	switch sc.NextScene {
	case EchoRepeatScene:
		return &EchoRepeat{
			TextManager: sc.TextManager,
		}
	}

	return &Echo{
		TextManager: sc.TextManager,
	}
}

// GetSceneInfo function returning info about scene
func (sc *Echo) GetSceneInfo(_ *scene.Context) (scene.Info, bool) {

	// TODO Write some actions for get data for texts

	text, _ := sc.TextManager.GetEchoText()
	return scene.Info{
		Text: text,
		ExpectedMessages: []scene.MessageMatcher{
			base_matchers.AnyMatcher,
		},
		Buttons: []scene.Button{
			{
				Title:   DoreEchoButtonText,
				Payload: &payloads.EchoDorePayload{},
			},
			{
				Title:   JoreEchoButtonText,
				Payload: &payloads.EchoJorePayload{},
			},
		},
		Err: base_matchers.NumberError,
	}, true
}
