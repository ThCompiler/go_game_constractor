// Code generated by scg 1,  DO NOT EDIT .
//
// EchoGame-Text usecase
//
// Command:
// scg
// DO NOT EDIT .

package usecase

import (
	"github.com/ThCompiler/go_game_constractor/director/scene"
	consts "github.com/ThCompiler/go_game_constractor/scg/example/scg/echogame/consts/textsname"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/echogame/pkg/str"
	store "github.com/ThCompiler/go_game_constractor/scg/example/scg/echogame/store"
)

type TextUsecase struct {
	store store.ScriptStore
}

func NewTextUsecase(store store.ScriptStore) *TextUsecase {
	return &TextUsecase{
		store: store,
	}
}

// GetEchoText get text for echo scene with variables
func (tu *TextUsecase) GetEchoText() (scene.Text, error) {
	text, err := tu.store.GetText(consts.EchoText)
	if err != nil {
		return scene.Text{}, nil
	}

	tts, err := tu.store.GetText(consts.EchoTTS)
	if err != nil {
		return scene.Text{}, nil
	}

	res := scene.Text{
		BaseText:     text,
		TextToSpeech: tts,
	}

	return res, nil
}

// GetEchoRepeatText get text for echoRepeat scene with variables
func (tu *TextUsecase) GetEchoRepeatText(userText string) (scene.Text, error) {
	text, err := tu.store.GetText(consts.EchoRepeatText)
	if err != nil {
		return scene.Text{}, nil
	}

	tts, err := tu.store.GetText(consts.EchoRepeatTTS)
	if err != nil {
		return scene.Text{}, nil
	}

	args := []interface{}{
		"userText", userText,
	}

	res := scene.Text{
		BaseText:     str.StringFormat(text, args...),
		TextToSpeech: str.StringFormat(tts, args...),
	}

	return res, nil
}

// GetGoodbyeText get text for goodbye scene with variables
func (tu *TextUsecase) GetGoodbyeText() (scene.Text, error) {
	text, err := tu.store.GetText(consts.GoodbyeText)
	if err != nil {
		return scene.Text{}, nil
	}

	tts, err := tu.store.GetText(consts.GoodbyeTTS)
	if err != nil {
		return scene.Text{}, nil
	}

	res := scene.Text{
		BaseText:     text,
		TextToSpeech: tts,
	}

	return res, nil
}

// GetHelloText get text for hello scene with variables
func (tu *TextUsecase) GetHelloText(number int64) (scene.Text, error) {
	text, err := tu.store.GetText(consts.HelloText)
	if err != nil {
		return scene.Text{}, nil
	}

	tts, err := tu.store.GetText(consts.HelloTTS)
	if err != nil {
		return scene.Text{}, nil
	}

	args := []interface{}{
		"number", number,
	}

	res := scene.Text{
		BaseText:     str.StringFormat(text, args...),
		TextToSpeech: str.StringFormat(tts, args...),
	}

	return res, nil
}
