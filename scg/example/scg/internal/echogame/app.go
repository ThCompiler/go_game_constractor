// Code generated by scg 1, .
//
// EchoGame-App file
//
// Command:
// scg
//.

package echogame

import (
	"fmt"
	"io"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/gin-gonic/gin"
	redis "github.com/go-redis/redis/v8"

	"github.com/ThCompiler/go_game_constractor/marusia/runner/hub"
	"github.com/ThCompiler/go_game_constractor/pkg/logger/zap"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/config"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/internal/controller/http/v1"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/internal/script"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/internal/texts/manager/usecase"
	echo_game_redis "github.com/ThCompiler/go_game_constractor/scg/example/scg/internal/texts/store/redis"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/internal/texts/store/storesaver"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/pkg/httpserver"
	"github.com/ThCompiler/go_game_constractor/scg/example/scg/pkg/logger/prepare"
)

// Run creates objects via constructors.
func Run(cfg *config.Config) {
	// Logger
	var logOut io.Writer

	if cfg.Log.LogDir != "" {
		file, err := prepare.OpenLogDir(cfg.Log.LogDir)
		if err != nil {
			log.Fatalf("Create logger error: %s", err)
		}

		defer func() {
			err = file.Close()
			log.Fatalf("Close log file error: %s", err)
		}()

		logOut = file
	} else {
		logOut = os.Stderr
	}

	l := zap.New(
		zap.Params{
			AppName:                  cfg.App.Name,
			LogDir:                   cfg.Log.LogDir,
			Level:                    cfg.Log.Level,
			UseStdAndFIle:            cfg.Log.UseStdAndFIle,
			AddLowPriorityLevelToCmd: cfg.Log.AddLowPriorityLevelToCmd,
		},
		logOut,
	)

	defer func() {
		_ = l.Sync()
	}()

	// Redis
	opt, err := redis.ParseURL(cfg.Redis.URL)
	if err != nil {
		l.Fatal(fmt.Errorf("app - Run - redis - redis.New: %w", err))
	}
	rdb := redis.NewClient(opt)

	// Repository
	echoGameStore := echo_game_redis.NewScriptRepository(rdb)

	err = storesaver.SaveScripts(echoGameStore)
	if err != nil && err != storesaver.ScriptAlreadySaveError {
		l.Fatal(fmt.Errorf("app - Run - store - saver.SaveStore: %w", err))
	}

	// Game Director
	gameDirectorConfigEchoGame := script.NewEchoGameScript(usecase.NewTextUsecase(echoGameStore))

	// HTTP Server
	runner := hub.NewHub()

	appHandler := gin.New()
	v1.NewEchoGameRouter(appHandler, l, gameDirectorConfigEchoGame, runner)
	httpServer := httpserver.New(appHandler, httpserver.Port(cfg.HTTP.Port))

	// Waiting signal
	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

	go runner.Run()

	select {
	case s := <-interrupt:
		l.Info("app - Run - signal: " + s.String())
	case err := <-httpServer.Notify():
		l.Error(fmt.Errorf("app - Run - httpServer.Notify: %w", err))
	}

	runner.StopHub()

	// Shutdown
	err = httpServer.Shutdown()
	if err != nil {
		l.Error(fmt.Errorf("app - Run - httpServer.Shutdown: %w", err))
	}
}
