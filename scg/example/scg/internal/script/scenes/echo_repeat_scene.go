// Code generated by scg 1, .
//
// EchoGame-SceneStructs
//
// Command:
// scg
//.

package scenes

import (
	"example/scg/internal/script/errors"
	"example/scg/internal/script/matchers"
	"example/scg/internal/script/payloads"
	"example/scg/internal/texts/manager"

	"github.com/ThCompiler/go_game_constractor/director"
	base_matchers "github.com/ThCompiler/go_game_constractor/director/scriptdirector/matchers"
	"github.com/ThCompiler/go_game_constractor/director/scriptdirector/scene"
	loghttp "github.com/ThCompiler/go_game_constractor/pkg/logger/http"
)

const (
	// DoreEchoRepeatButtonText - text for button Dore
	DoreEchoRepeatButtonText = "Привет"
)

// EchoRepeat scene
type EchoRepeat struct {
	loghttp.LogObject
	TextManager manager.TextManager
	NextScene   SceneName
}

// React function of actions after scene has been played
func (sc *EchoRepeat) React(ctx *scene.Context) scene.Command {
	// TODO Write the actions after EchoRepeat scene has been played
	switch {
	// Buttons select
	case ctx.Request.NameMatched == DoreEchoRepeatButtonText && ctx.Request.WasButton:
		sc.NextScene = EchoRepeatScene

	// Matcher select
	case ctx.Request.NameMatched == base_matchers.AnyMatchedString:

	case ctx.Request.NameMatched == matchers.CheckedMatchedString:
		sc.NextScene = EchoScene
	case ctx.Request.NameMatched == matchers.AgreedMatchedString:

	default:
		sc.NextScene = EchoRepeatScene
	}

	return scene.NoCommand
}

// Next function returning next scene
func (sc *EchoRepeat) Next() scene.Scene {
	switch sc.NextScene {
	case EchoRepeatScene:
		return &EchoRepeat{
			TextManager: sc.TextManager,
		}
	case EchoScene:
		return &Echo{
			TextManager: sc.TextManager,
		}
	}

	return &EchoRepeat{
		TextManager: sc.TextManager,
	}
}

// GetSceneInfo function returning info about scene
func (sc *EchoRepeat) GetSceneInfo(_ *scene.Context) (scene.Info, bool) {
	var (
		userText string
	)

	// TODO Write some actions for get data for texts

	text, _ := sc.TextManager.GetEchoRepeatText(
		userText,
	)
	return scene.Info{
		Text: text,
		ExpectedMessages: []scene.MessageMatcher{
			base_matchers.AnyMatcher,
			matchers.CheckedMatcher,
			matchers.AgreedMatcher,
		},
		Buttons: []director.Button{
			{
				Title:   DoreEchoRepeatButtonText,
				Payload: &payloads.EchoRepeatDorePayload{},
			},
		},
		Err: errors.DoreError,
	}, true
}
